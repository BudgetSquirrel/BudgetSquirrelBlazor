<div class="_editable-text @this.CssClass">
  @if (this.isEditing)
  {
    <input
      value="@this.valueState"
      @onchange="@((ChangeEventArgs __e) => this.manualValue = __e.Value.ToString())"
      class="_input"
      placeholder="@this.Placeholder"
      type="@this.Type"
      name="@this.Name"
      style='@("width: " + this.inputWidth + ";")' />

    <button
      @onclick="@this.Change"
      class="material-icons icon-button">
      check
    </button>
  }
  else
  {
    <span class="_stat">@this.displayValue</span>
    <button
      @onclick="@this.OnEditClicked"
      class="material-icons icon-button _btn-done">
      mode_edit
    </button>
  }
</div>

@code {
  private const string buttonWidth = "1.4em";

  private const string typeCurrency = "currency";
  
  [Parameter]
  public string Value { get; set; }
  
  [Parameter]
  public string CssClass { get; set; } = "";

  [Parameter]
  public string Placeholder { get; set; } = "";

  [Parameter]
  public string Name { get; set; } = "";

  [Parameter]
  public string Type { get; set; } = "text";

  [Parameter]
  public double WidthEms { get; set; } = 12;

  [Parameter]
  public EventCallback<string> OnChange { get; set; } = new EventCallback<string>();

  private string manualValue { get; set; } = null;

  private string valueState => this.manualValue ?? this.Value ?? "";

  private string displayValue
  {
    get
    {
      switch(this.Type)
      {
        case typeCurrency:
          return decimal.Parse(this.valueState).ToString("C");
        default:
          return this.valueState;
      }
    }
  }

  private bool isEditing = false;

  private string inputWidth => $"calc({this.WidthEms}em - {buttonWidth})";

  private string inputType
  {
    get
    {
      switch(this.Type)
      {
        case typeCurrency:
          return "number";
        default:
          return this.Type;
      }
    }
  }

  private void OnEditClicked()
  {
    this.isEditing = true;
  }

  private Task Change()
  {
    this.isEditing = false;
    return this.OnChange.InvokeAsync(this.valueState);
  }
}